    async changePassword(userId: number, loginUserDto: LoginUserDto) {

        const resp: ResponseScheme = {
            error: false,
            message: '',
            statusCode: 200,
            data: {},
        };

        resp.data = {};
        resp.error = false;
        resp.statusCode = 200;

        const { password, newpassword, newpassword_confirmation } = loginUserDto;

        // Validaciones similares a Laravel
        if (!password) {
            resp.error = true;
            resp.statusCode = 400;
            resp.message = 'La clave antigua es obligatoria.';
            return resp;
        }
        if (!newpassword) {
            resp.error = true;
            resp.statusCode = 400;
            resp.message = 'La clave nueva es obligatoria.';
            return resp;
        }
        if (newpassword.length < 6) {
            resp.error = true;
            resp.statusCode = 400;
            resp.message = 'La nueva clave tiene que tener mínimo 6 dígitos.';
            return resp;
        }
        if (!newpassword_confirmation) {
            resp.error = true;
            resp.statusCode = 400;
            resp.message = 'Debe confirmar la nueva clave.';
            return resp;
        }
        if (newpassword !== newpassword_confirmation) {
            resp.error = true;
            resp.statusCode = 400;
            resp.message = 'Las claves tienen que ser iguales.';
            return resp;
        }
        if (newpassword === 'maar') {
            resp.error = true;
            resp.statusCode = 400;
            resp.message = 'Esta contraseña no puede ser usada.';
            return resp;
        }

        try {
            // Buscar usuario por id
            const user = await this.prisma.user.findFirst({
                where: { id: userId, deleted_at: null },
            });

            if (!user) {
                resp.error = true;
                resp.statusCode = 404;
                resp.message = 'No existe el usuario';
                return resp;
            }

            // Verificar contraseña actual
            const hash = user.password.replace(/^\$2y(.+)$/i, '$2a$1');
            const isPasswordMatching = await bcrypt.compare(password, hash);

            if (!isPasswordMatching) {
                resp.error = true;
                resp.statusCode = 401;
                resp.message = 'Contraseña es incorrecta';
                return resp;
            }

            // Guardar nueva contraseña hasheada
            const newHashedPassword = await bcrypt.hash(newpassword, 10);
            await this.prisma.user.update({
                where: { id: user.id },
                data: { password: newHashedPassword },
            });

            resp.error = false;
            resp.statusCode = 200;
            resp.message = 'Contraseña actualizada';
            resp.data = {};
        } catch (error) {
            console.error('Error al cambiar contraseña:', error);
            resp.error = true;
            resp.statusCode = error.status || 400;
            resp.message = error.message || 'Ocurrió un error inesperado.';
            resp.data = {};
        }

        return resp;
    }