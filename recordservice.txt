import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Platform, NavController } from '@ionic/angular';
import { Storage } from '@ionic/storage-angular';
import { environment } from 'src/environments/environment';
import { QueryService } from './query.service';
import { General } from '../interfaces/general';
import { OfflineGeneral } from '../interfaces/general_offline';
import { EnterpriseAnswer } from '../interfaces/enterprise';
import { Device } from '@capacitor/device';

const apiUrl = environment.apiUrl;

@Injectable({
    providedIn: 'root',
})
export class RecordService {
    version: any;
    projects: any = [];
    enterprises: any = [];
    categories: any = [];
    risks: any = [];
    enterprise_id: any = '';
    project_id: any = '';
    reports: any = [];

    constructor(
        private platform: Platform,
        private storage: Storage,
        private query: QueryService,
        private http: HttpClient,
        private navCtrl: NavController
    ) {
        this.loadStorage();
    }

    // Obtener empresas
    getEnterprises() {
        return this.query.executeQuery<EnterpriseAnswer>('get', '/getEnterprises', {});
    }

    // Obtener información general offline
    getGeneralInformation(data: any) {
        return this.query.executeQuery<OfflineGeneral>('post', '/getOfflineInfo', data);
    }

    // Guardar datos offline
    saveOfflineData(data: OfflineGeneral) {
        this.version = data.version;
        this.enterprises = data.enterprises;
        this.categories = data.categories;
        this.risks = data.risks;
        this.reports = data.records;
        this.saveStorage();
    }

    // Guardar un nuevo registro en la lista local
    saveRecordLocally(current_record: any) {
        let newArray = [current_record].concat(this.reports);
        this.reports = newArray;
        this.saveStorage();
    }

    // Verificar selección previa
    async checkPreSelect() {
        await this.loadStorage();

        if (this.enterprise_id == '' || this.project_id == '') {
            this.navCtrl.navigateRoot('/pre-main');
            return Promise.resolve(false);
        }

        return Promise.resolve(true);
    }

    // Guardar datos en almacenamiento local
    private async saveStorage() {
        const info = await Device.getInfo();

        if (info.platform != 'web') {
            this.storage.set('enterprises', this.enterprises);
            this.storage.set('categories', this.categories);
            this.storage.set('risks', this.risks);
            this.storage.set('project_id', this.project_id);
            this.storage.set('enterprise_id', this.enterprise_id);
            this.storage.set('reports', this.reports);
            this.storage.set('version', this.version);
        } else {
            localStorage.setItem('enterprises', JSON.stringify(this.enterprises));
            localStorage.setItem('categories', JSON.stringify(this.categories));
            localStorage.setItem('risks', JSON.stringify(this.risks));
            localStorage.setItem('project_id', this.project_id);
            localStorage.setItem('enterprise_id', this.enterprise_id);
            localStorage.setItem('reports', JSON.stringify(this.reports));
            localStorage.setItem('version', JSON.stringify(this.version));
        }
    }

    // Cargar datos del almacenamiento local
    async loadStorage() {
        const info = await Device.getInfo();
        let promesa = new Promise<void>((resolve, reject) => {
            if (info.platform != 'web') {
                this.storage
                    .create()
                    .then(() => {
                        this.storage.get('enterprises').then((enterprises) => {
                            if (enterprises) {
                                this.enterprises = enterprises;
                            }
                        });
                        this.storage.get('categories').then((categories) => {
                            if (categories) {
                                this.categories = categories;
                            }
                        });
                        this.storage.get('risks').then((risks) => {
                            if (risks) {
                                this.risks = risks;
                            }
                        });
                        this.storage.get('project_id').then((project_id) => {
                            if (project_id) {
                                this.project_id = project_id;
                            }
                        });
                        this.storage.get('enterprise_id').then((enterprise_id) => {
                            if (enterprise_id) {
                                this.enterprise_id = enterprise_id;
                            }
                        });
                        this.storage.get('version').then((version) => {
                            if (version) {
                                this.version = version;
                            }
                        });
                        this.storage.get('reports').then((reports) => {
                            if (reports) {
                                this.reports = reports;
                            }
                            resolve();
                        });
                    });
            } else {
                if (localStorage.getItem('enterprises')) {
                    this.enterprises = JSON.parse(localStorage.getItem('enterprises')!);
                }
                if (localStorage.getItem('categories')) {
                    this.categories = JSON.parse(localStorage.getItem('categories')!);
                }
                if (localStorage.getItem('risks')) {
                    this.risks = JSON.parse(localStorage.getItem('risks')!);
                }
                if (localStorage.getItem('project_id')) {
                    this.project_id = localStorage.getItem('project_id');
                }
                if (localStorage.getItem('enterprise_id')) {
                    this.enterprise_id = localStorage.getItem('enterprise_id');
                }
                if (localStorage.getItem('version')) {
                    this.version = localStorage.getItem('version');
                }
                if (localStorage.getItem('reports') && localStorage.getItem('reports') !== 'undefined') {
                    this.reports = JSON.parse(localStorage.getItem('reports')!);
                }
                resolve();
            }
        });
        return promesa;
    }
}