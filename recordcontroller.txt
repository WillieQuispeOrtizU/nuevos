import { Controller, Get, Post, Body, Patch, Param, Delete, Query, UseInterceptors, UploadedFiles, Req } from '@nestjs/common';
import { RecordService } from './record.service';
import { CreateRecordDto } from './dto/create-record.dto';
import { UpdateRecordDto } from './dto/update-record.dto';
import { PaginationDto } from 'src/common/dto/pagination.interface';
import { FileFieldsInterceptor } from '@nestjs/platform-express';

@Controller('record')
export class RecordController {
  constructor(private readonly recordService: RecordService) { }

  @Post()
  create(@Body() createRecordDto: CreateRecordDto) {
    return this.recordService.create(createRecordDto);
  }

  @Get()
  findAll(@Query() paginationDto: PaginationDto) {
    return this.recordService.findAll(paginationDto);
  }

  @Patch(':id')
  update(@Param('id') id: string, @Body() UpdateRecordDto: UpdateRecordDto) {
    return this.recordService.update(+id, UpdateRecordDto);
  }

  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.recordService.remove(+id);
  }
  
  @Patch(':id/upload-photos')
  @UseInterceptors(
    FileFieldsInterceptor([
      { name: 'front', maxCount: 1 },
      { name: 'back', maxCount: 1 },
    ]),
  )
  async uploadPhotos(
    @Param('id') id: string,
    @UploadedFiles()
    files: {
      front?: Express.Multer.File[];
      back?: Express.Multer.File[];
    },
    @Req() req: Request,
  ) {
    const frontFile = files?.front?.[0];
    const backFile = files?.back?.[0];
    return this.recordService.uploadPhotos(
      +id, // Convertir el string del parámetro a número
      { front: frontFile, back: backFile },
      req,
    );
  }
}
